$themes: (
  "dark": (
    primary-color: $dark-blue,
    secondary-color: $light-grey,
    tertiary-color: lighten($dark-blue, 5%),
    danger-color: lighten($danger, 20%),
    success-color: $success,
    warning-color: $warning,
    info-color: $info,
    loader-img-r: $r-img-light-url,
    loader-img-m: $m-img-light-url,
  ),
  "light": (
    primary-color: $light-grey,
    secondary-color: $dark-grey,
    tertiary-color: darken($light-grey, 5%),
    danger-color: $danger,
    success-color: $success,
    warning-color: $warning,
    info-color: $info,
    loader-img-r: $r-img-dark-url,
    loader-img-m: $m-img-dark-url,
  ),
);

// génère un nouveau mixin nommé themed.
// L'idée est que toutes les règles css définie à l'interieur
// seront dupliquée en dark et light.
@mixin themed() {
  // pour chaque thème défini dans la variable $themes
  @each $theme, $map in $themes {
    // défini un nouveau matcher .theme--nomdutheme le-matcheur-courant
    .theme--#{$theme} & {
      // defini une variable globale contenant un hash
      // de toutes les valeurs courantes du theme
      $theme-map: () !global;
      @each $key, $submap in $map {
        $value: map-get(map-get($themes, $theme), "#{$key}");
        $theme-map: map-merge(
          $theme-map,
          (
            $key: $value,
          )
        ) !global;
      }
      // execute le contenu original du mixin
      @content;
      // supprime la variable globale
      $theme-map: null !global;
    }
  }
}

// Nouvelle fonction theme qui va aller lire la valeur
// de la clé dans le hash temporaire défini par le mixin
@function t($key: "base0") {
  @return map-get($theme-map, $key);
}
